package com.rest.api.controller;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.expression.spel.ast.OpAnd;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.rest.api.domain.model.Cliente;
import com.rest.api.domain.repository.ClienteRepository;
import com.rest.api.domain.service.CadastroClienteService;

@RestController
public class ClienteController {
	
	
	@Autowired
	private ClienteRepository clienteRepository;
	
	@Autowired
	private CadastroClienteService cadastroCliente;
	
	@GetMapping("/clientes")
	public List<Cliente> listar() {
		
		return clienteRepository.findAll();
		
	}
	
	@GetMapping("clientes/{clienteID}")
	public ResponseEntity<Cliente> buscar(@PathVariable Long clienteID) {
		
		Optional<Cliente> cliente = clienteRepository.findById(clienteID);
		
		if (cliente.isPresent()){
			return ResponseEntity.ok(cliente.get());
		}
		
//		retorna cliente, caso n√£o tenha nada dentro retorna null
//		return cliente.orElse(null);
		
		return ResponseEntity.notFound().build();
	}
	
	
	
	//cadastro de um cliente
	@PostMapping("clientes")
	@ResponseStatus(HttpStatus.CREATED) //muda o status para 201 (create)
	public Cliente adicionar(@Valid @RequestBody Cliente cliente) {
		
		return cadastroCliente.salvar(cliente);
	}
	
	
	//valida as regras @email, @size, @NotBlank
	@PutMapping("/{clienteId}")
	public ResponseEntity<Cliente> atualizar(@Valid @PathVariable Long clienteId, @RequestBody Cliente cliente){
	
		if(!clienteRepository.existsById(clienteId)){
			
			return ResponseEntity.notFound().build();
		}
		
			cliente.setId(clienteId);
			cliente = cadastroCliente.salvar(cliente);
		
		
		return ResponseEntity.ok(cliente);
	}
	
	
	@DeleteMapping("/{clienteId}")
	public ResponseEntity<Void> deletar(@PathVariable Long clienteId){
		
		if(!clienteRepository.existsById(clienteId)) {
			return ResponseEntity.notFound().build();
		}
		
		clienteRepository.deleteById(clienteId);
		
		return ResponseEntity.noContent().build();
		
	}
	
}
